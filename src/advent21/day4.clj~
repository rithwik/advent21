(require '[clojure.string :as str])

(defn transpose [xs] (apply map list xs))

(defn move [board marks num]
  (let [newmarks (map (fn [row] (map #(if (= % num) 1 0) row)) board)]
    (->> [(flatten marks) (flatten newmarks)]
         transpose
         (map #(apply + %))
         (partition 5))))

(defn bingo? [marks]
  (let [win? (fn [lst] (some #(= true %) (map (fn [xs] (every? #(= % 1) xs)) lst)))]
    (or (win? marks)
        (win? (transpose marks)))))

(defn answer [board marks num]
  (let [xs (flatten board)
        ys (map #(if (= % 1) 0 1) (flatten marks))]
    (* num (apply + (map #(apply * %) (transpose [xs ys]))))))

(defn play-bingo [board nums]
  (loop [i 0
         marks (repeatedly 5 #(repeat 5 0))]
    (if (= i (count nums))
      (if (bingo? marks) [(dec i) (answer board marks (nth nums (dec i)))] false)
      (if (bingo? marks) [(dec i) (answer board marks (nth nums (dec i)))]
        (recur (inc i) (move board marks (nth nums i)))))))
 
(def moves
  (as->
 "27,14,70,7,85,66,65,57,68,23,33,78,4,84,25,18,43,71,76,61,34,82,93,74,26,15,83,64,2,35,19,97,32,47,6,51,99,20,77,75,56,73,80,86,55,36,13,95,52,63,79,72,9,10,16,8,69,11,50,54,81,22,45,1,12,88,44,17,62,0,96,94,31,90,39,92,37,40,5,98,24,38,46,21,30,49,41,87,91,60,48,29,59,89,3,42,58,53,67,28" x
 (str/split x #",")
 (map read-string x)))

(def input
  (as->
   "input_4.txt" x
    (slurp x)
    (map #(str/split % #" +") x)
    (map #(map read-string %) x)))

(->>
   "input_4_boards.txt"
  slurp
  str/split-lines
  (filter #(not= 0 (count %)))
  (map str/trim)
  (map #(str/split % #" +"))
  (map #(map read-string %))
  (partition 5 5)
  (map #(play-bingo % moves))
  (sort-by first)
  last)
